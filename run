#!/bin/bash

install_packages() {
    local package_name="$1"
    local type="${2:-1}"  # Setting a default value if $2 is not provided
    local pm=''  # Package manager
    local epm=''  # Extra pm

    case "$type" in
        1) pm='apt-get'; epm='install' ;;
        2) pm='yum'; epm='install' ;;
        3) pm='pacman'; epm='-S' ;;
        *)
            echo "Package manager not found. Please install $package_name manually."
            exit 2
            ;;
    esac

    echo "$package_name is getting installed with $pm..."
    sleep 2

    if [ -x "$(command -v "$pm")" ]; then
        sudo "$pm" "$epm" -y "$package_name" &&
        echo "$1 installed successfully using $pm" ||
        {
            ((type++))
            install_packages "$1" "$type"
        }
    else
        ((type++))
        install_packages "$1" "$type"
    fi
}


deleteFile() {
    local file
    if [[ "${deleteExecutable}" == "true" ]];then
        for file in "$@"; do
            rm "$file"
        done
    fi
}

execute_code() {
    local file="$1"
    local extension="${file##*.}"
    local fwe="${file%.*}"  # filename without extension

    case "$extension" in
        "py")
            python3 "$file"
            ;;
        "java")
            javac "$file" && {
                cpf=$(java "$file" 2>&1 | awk '{print $NF}')
                java "${cpf}"
                } && {
                    deleteFile "${cpf}.class"
                }
            ;;
        "js")
            node "$file"
            ;;
        "cpp" | "cc" | "c" | "c++")
            g++ "$file" -o "${fwe}.out" && "./${fwe}.out" && {
                deleteFile "${fwe}.out"
            }
            ;;
        "class")
            java "$fwe"
            ;;
        "asm")
            nasm -f elf -o "${fwe}.o" "$file" && {
                ld -m elf_i386 -o "${fwe}.out" "${fwe}.o"
            } && "./${fwe}.out" && {
                deleteFile "${fwe}.out" "${fwe}.o"
            }
            ;;
        "sh")
            bash "$file"
            ;;
        *)
            echo "Unsupported file extension: $extension"
            exit 1
            ;;
    esac
}

main() {
    local file="$1"

    case "$file" in
        *.py)
            execute_code "$file"
            ;;
        *.java | *.class)
            if ! command -v java &> /dev/null; then
                install_packages "openjdk"
            fi
            execute_code "$file"
            ;;
        *.cpp | *.cc | *.c | *.c++)
            if ! command -v g++ &> /dev/null; then
                install_packages "g++"
            fi
            execute_code "$file"
            ;;
        *.js)
            if ! command -v nodejs &> /dev/null; then
                install_packages "nodejs"
            fi
            execute_code "$file"
            ;;
        *.asm)
            if ! command -v nasm &> /dev/null; then
                install_packages "nasm"
            fi
            execute_code "$file"
            ;;
        *.sh)
            execute_code "$file"
            ;;
        *)
            echo "Error: Unsupported file type: $file"
            ;;
    esac
}

if [[ "$1" == "--version" ]]; then
    echo -e "version is 0.6.1"
    exit
fi

usage() {
       cat << EOF
This is a code runner command.
Supported languages: asm, c, cpp, java, py, node.js, sh.
Usage:
    <filename> - Detects file type and runs.
    -i <packages> - Installs or upgrades packages.
    -d  - Deletes the executable code and keeps the source.
    -m  - Uses grep to find pattern.
    -c  - Will provide comments while running multiple files used when -m is used 
Examples:
    run myfile.cpp           # Run a C++ file.
    run -i python            # Install or upgrade python
    run -d myfile.c          # Delete the executable of a C file.
    run -m "[1-9].c$"        # Runs all numbered c files eg:-1.c,12.c
    run -m .                 # Runs all files in that dictionary that are supported
EOF
}

if [[ "$1" == "--help" ]]; then
    usage
    exit
fi

deleteExecutable="false"
multipleFiles="false" #run multiple files
comment="main" #comments while executing multiple files

while getopts ":dmci:" opt; do
    case ${opt} in
        d ) deleteExecutable="true" ;;
        i ) install_packages "$OPTARG"
            exit ;;
        m ) multipleFiles="true" ;;
        c ) comment="comment";;
        \? ) echo "Invalid option: $OPTARG" 1>&2; exit 3 ;;
        : ) echo "Option -$OPTARG requires an argument." 1>&2; exit 3 ;;
    esac
done

directory=$(dirname "${@: -1}")
cd "$directory" || exit
file=$(basename "${@: -1}")

comment(){
    echo -e "\nrunning $1 ...\n";
    main $1;
    echo -e "\nexecuted $1 ..."
}

if [ ! -f "$file" ]; then
    if [ "${multipleFiles}" == "true" ]; then
        for f in  $(ls -p | grep -v / |  
            grep -E "${file}" | grep -v -E '\.out$|\.o$');do
            ${comment} $f;
        done
    else echo "file not found: $file";exit 1;
    fi
else main "$file"
fi