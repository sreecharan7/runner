#!/usr/bin/bash

detectOs(){
    linuxDistro=$(cat /etc/os-release | grep -E '^ID_LIKE=' | 
    cut -d '=' -f2 | tr -d '"' | cut -d " " -f2);
    case  "${linuxDistro}" in
        "debian") echo "1";
            ;;
        "fedora") echo "2";
            ;;
        *) echo "*";
            ;;
    esac;
}

installCommand(){
    type=$(detectOs);
    case ${type} in 
        1) echo "sudo apt install";
            ;;
        2) echo "yum install";
            ;;
        *) echo "error--command"; #generating the error 
            ;;                    #command this will help us in the next comand 
    esac
}


installLanguage(){
    #1 is program language name
    echo -e "\033[0;32minstalling ${1}  in progess .....\033[0m"; 
    installCommand="$(installCommand) ${1} -y";
    sleep 3;
    ${installCommand};

    if [[ 0 -eq $? ]];then
        echo "${1} is installed sucessfully"
    else
        echo -e "\033[0;33msomething went wrong while installing ..."; 
        echo "maybe os is not suppoty for install";
        echo -e "${1} may not be found \033[0m";
        exit 3;
    fi
}


versionCheckerInstaller(){
    ${1} --version 1>/dev/null 2>&1; # 1 is language name
    if [[ 0 -ne ${?} ]]; then
        echo "${1} is not found";
        installLanguage "${1}";
    fi
}


fileOutput(){
    filepath=${1};
    filename=${2};
    echo "$(echo "${filepath:0:-${#filename}}")$(
                echo ${filename} | cut -d '.' -f1)${3}"; #output extension
}

deleteFile(){
    if [[ "${deleteExecutable}" == "true" ]];then
        for file in  ${@}
        do
            rm ${file} ;
        done
    fi
}

checkerAndRunnerJava(){
    java --version 1>/dev/null 2>&1;
    if [[ 0 -ne ${?} ]];then
        echo "java not found";
        installLanguage "default-jdk";
    fi
    #1 is file path 2 indicates the filename
    path=${1:0:-${#2}};
    if [[ -z ${path} ]];then
        path="./"
    fi
    javac -d ${path} ${1} ;
    if [[ 0 -eq ${?} ]];then
        cd ${path};
        fileOutput=$(ls -t *.class  | head -n 1);
        c=".class";
        fileOutput="${fileOutput:0:-${#c}}";
        java ${fileOutput};
        deleteFile "${fileOutput}.class";
    fi
}

runCCpp(){
    filepath=${1};  #2 indicates the filename
    fileOutput=$(fileOutput ${filepath} ${2} ".out");
    ${3} ${filepath} -o ${fileOutput} ; #3 indicates the command
    if [[ 0 -eq ${?} ]];then
        ./${fileOutput};
        deleteFile ${fileOutput};
    fi
}

runNasm(){
    filepath=${1};
    fileOutput=$(fileOutput ${filepath} ${2} ".o");  #2 indicates the filename 
    #this will just .o file 
    nasm -f elf -o ${fileOutput} ${filepath};
    if [[ 0 -eq ${?} ]];then
        fileOutput2=$(fileOutput ${filepath} ${2} ".out"); #it contains exeutable file
        ld -m elf_i386 -o ${fileOutput2} ${fileOutput};
        if [[ 0 -eq ${?} ]];then
            ./${fileOutput2}; 
            deleteFile ${fileOutput} ${fileOutput2};
        fi
    fi   
}


detectLanguage(){
    # 1 contins the filepath
    filename=$(echo ${1} | awk -F '[/]' '{print $NF}');
    filetype=$(echo ${filename} | cut -d '.' -f2);

    case "${filetype}" in
        "c")  versionCheckerInstaller "gcc";
            runCCpp ${1} ${filename} "gcc";
            ;;
        "c++"|"cpp") versionCheckerInstaller "g++";
            runCCpp ${1} ${filename} "g++";
            ;;
        "py") versionCheckerInstaller "python3";
            python3 ${1};
            ;;
        "asm") versionCheckerInstaller "nasm"
            runNasm ${1} ${filename};
            ;;
        "java")  checkerAndRunnerJava ${1} ${filename};
            ;;
        "js") versionCheckerInstaller "nodejs"
            nodejs ${1};
            ;;
        *) echo -e "\033[0;31mlanguage is not supported\033[0m";
            ;;
    esac
}

usage(){
    BLUE='\033[0;34m'
    YELLOW='\033[0;33m'
    NC='\033[0m' # No Color

    printf "${BLUE}This is a code runner command${NC}\n"
    printf "Supported languages: asm/c/cpp/java/js/py\n"
    printf "${YELLOW}To use the command:\n"
    printf "\t<filename> - Detects file type and runs\n"
    printf "\t-i <language name> - Installs or upgrades language\n"
    printf "\t-d <filename> - Deletes the executable code and keeps the source\n${NC}"

}

if [[ -z ${@} ]];then
    echo -e "Please provide the \033[0;31mfilename/filepath\033[0m.";
    exit 1;
fi

filepath=${@: -1};

if [[ "${1}" == "--version" ]];then
    echo -e "version is 0.5.3";
    exit;
fi

if [[ "${1}" == "--help" ]];then
    usage ;
    exit;
fi

while getopts ":di:" opt; do
    case ${opt} in
        d ) deleteExecutable="true";;
        i ) installLanguage "$OPTARG";
            exit; ;;
        \? ) echo "Invalid option: $OPTARG" 1>&2; exit 4;;
        : ) echo "Option -$OPTARG requires an argument." 1>&2; exit 4;;
    esac
done


if [[ ! -e ${filepath} ]];then
    echo -e "\033[0;31mFile does not exist at the specified location: $filepath\033[0m";
    exit 2;
fi



detectLanguage ${filepath};